name: packerbuild

on:
  push:
    branches:
      - main

jobs:
  packerbuild:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    permissions:
          contents: 'read'
          id-token: 'write'   
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Run compile check
      run: npm run build

    - name: Create .env File
      run: echo "${{ secrets.ENV_CONTENTS }}" > .env

    - name: Run tests
      run: npm test
    
    - name: Install Packer
      run: |
          wget https://releases.hashicorp.com/packer/1.7.6/packer_1.7.6_linux_amd64.zip
          unzip packer_1.7.6_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer version


    - name: Initialize packer
      run: |
          packer init .

    - name: Run packer fmt
      run: |
          set -e
          packer fmt -check .

    - name: Run packer validate
      run: |
          set -e
          packer validate .
    
    - name: Set up Google Cloud SDK
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_PACKER }}

    - name: Debug GCP_APPLICATION_CREDENTIALS secret
      run: echo "${{ secrets.GCP_CREDENTIALS_PACKER }}"

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Run packer build
      run: packer build .

    - name: Authenticate with GCP
      uses: 'google-github-actions/auth@v2'
      with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_FOR_INSTANCE }}

    - name: Debug GCP_APPLICATION_CREDENTIALS secret
      run: echo "${{ secrets.GCP_CREDENTIALS_FOR_INSTANCE }}"

    - name: Get latest image
      id: get-latest-image
      run: |
        image_list=$(gcloud compute images list --filter="name~'packer-.*'" --format="value(NAME, creationTimestamp)" | sort -k2 -r)
        custom_image=$(echo "$image_list" | head -n1 | awk '{print $1}')

        echo "Latest Image: $custom_image"
        echo "::set-output name=image_id::$custom_image"
        
    - name: Create New Instance Template Version
      run: |
          custom_image_id=${{ steps.get-latest-image.outputs.image_id }}
          echo "Using image: $custom_image_id"
          gcloud compute instance-templates create ${{ secrets.INSTANCE_TEMPLATE }} \
           --region=${{ secrets.REGION }} \
           --network=https://www.googleapis.com/compute/v1/projects/${{ secrets.PROJECT_ID }}/global/networks/${{ secrets.VPC_NETWORK }}  \
           --subnet=https://www.googleapis.com/compute/v1/projects/${{ secrets.PROJECT_ID }}/regions/us-east1/subnetworks/${{ secrets.SUBNET }} \
           --instance-template-region=${{ secrets.REGION }} \
           --boot-disk-type=pd-standard \
           --machine-type=e2-medium \
           --image=$custom_image \
           --boot-disk-kms-keyring=${{ secrets.KEYRING }} \
           --boot-disk-kms-location=${{ secrets.REGION }} \
           --boot-disk-kms-key=projects/${{ secrets.PROJECT_ID }}/locations/${{ secrets.REGION }}/keyRings/${{ secrets.KEYRING }}/cryptoKeys/${{ secrets.VM_CRYPTO_KEY }} \
           --metadata=startup-script="#\!/bin/bash
           ENV_FILE=\"/opt/csye6225/webapp/.env\"
           if [ -e \"\$ENV_FILE\" ]; then
              sed -i '1iLOGPATH=/var/log/webapp/' \"\$ENV_FILE\"
              sed -i 's/^DB_HOST=.*/DB_HOST=${{ secrets.DB_HOST }}/' \"\$ENV_FILE\"
              sed -i 's/^DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/' \"\$ENV_FILE\"
              sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/' \"\$ENV_FILE\"
              sed -i 's/^DB_NAME=.*/DB_NAME=${{ secrets.DB_NAME }}/' \"\$ENV_FILE\"
              echo \"\$ENV_FILE\"
          fi
          sudo chown -R csye6225:csye6225 /opt/csye6225/
          sudo chown -R csye6225:csye6225 /var/log/webapp/
          sudo systemctl restart webapp"

    - name: Start rolling-update
      run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.INSTANCE_GROUP }} \
          --version=template=projects/${{ secrets.PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/${{ secrets.INSTANCE_TEMPLATE }} \
          --region=${{ secrets.REGION }} \
          --max-unavailable=2

    - name: wait till Status is reached
      run: |
          gcloud compute instance-groups managed wait-until ${{ secrets.INSTANCE_GROUP }} \
          --version-target-reached \
          --region=${{ secrets.REGION }}
    
    - name: wait for rollout Status to be True
      run: |
          #!/bin/bash
          MIG_NAME="${{ secrets.INSTANCE_GROUP }}"
          REGION="${{ secrets.REGION }}"
        
          while true; do
            STATUS=$(gcloud compute instance-groups managed describe $MIG_NAME \
                --region=$REGION \
                --format="value(status.versionTarget.isReached)")
            
            if [ "$STATUS" == "True" ]; then
                echo "Rollout status: true. All VM instances are using the target version."
                break
            else
                echo "Rollout status: false. Waiting for rollout to complete..."
                sleep 30 # Wait for 30 seconds before checking again
            fi
          done


    - name: Complete workflow
      run: echo "Workflow completed successfully!"
